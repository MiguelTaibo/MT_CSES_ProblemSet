"""
    We have two parts here, the first one calculates all 92 possible configurations
    Second One finds witch configurations can be applied for the field
"""
calc_config = False

if calc_config:
    final_queens = []

    def checkInterval(n):
        return 0<=n and n<8

    def nextRow(queens,line):
        possible_y = [i for i in range(8)]
        if line==8:
            final_queens.append(queens)
            return
        for i in range(line):
            [x,y] = queens[i]
            if possible_y.count(y) != 0:
                possible_y.remove(y)
            if possible_y.count(y+(x-line))!=0:
                possible_y.remove(y+(x-line))
            if possible_y.count(y-(x-line)) != 0:
                possible_y.remove(y-(x-line))
        for y in possible_y:
            next_queens = queens.copy()
            next_queens.append([line, y])
            nextRow(next_queens,line+1)

    for j in range(8):
        queens =[[0,j]]
        nextRow(queens,1)

    print(final_queens)
    print(len(final_queens))
else:
    final_queens = [[[0, 0], [1, 4], [2, 7], [3, 5], [4, 2], [5, 6], [6, 1], [7, 3]], [[0, 0], [1, 5], [2, 7], [3, 2], [4, 6], [5, 3], [6, 1], [7, 4]], [[0, 0], [1, 6], [2, 3], [3, 5], [4, 7], [5, 1], [6, 4], [7, 2]], [[0, 0], [1, 6], [2, 4], [3, 7], [4, 1], [5, 3], [6, 5], [7, 2]], [[0, 1], [1, 3], [2, 5], [3, 7], [4, 2], [5, 0], [6, 6], [7, 4]], [[0, 1], [1, 4], [2, 6], [3, 0], [4, 2], [5, 7], [6, 5], [7, 3]], [[0, 1], [1, 4], [2, 6], [3, 3], [4, 0], [5, 7], [6, 5], [7, 2]], [[0, 1], [1, 5], [2, 0], [3, 6], [4, 3], [5, 7], [6, 2], [7, 4]], [[0, 1], [1, 5], [2, 7], [3, 2], [4, 0], [5, 3], [6, 6], [7, 4]], [[0, 1], [1, 6], [2, 2], [3, 5], [4, 7], [5, 4], [6, 0], [7, 3]], [[0, 1], [1, 6], [2, 4], [3, 7], [4, 0], [5, 3], [6, 5], [7, 2]], [[0, 1], [1, 7], [2, 5], [3, 0], [4, 2], [5, 4], [6, 6], [7, 3]], [[0, 2], [1, 0], [2, 6], [3, 4], [4, 7], [5, 1], [6, 3], [7, 5]], [[0, 2], [1, 4], [2, 1], [3, 7], [4, 0], [5, 6], [6, 3], [7, 5]], [[0, 2], [1, 4], [2, 1], [3, 7], [4, 5], [5, 3], [6, 6], [7, 0]], [[0, 2], [1, 4], [2, 6], [3, 0], [4, 3], [5, 1], [6, 7], [7, 5]], [[0, 2], [1, 4], [2, 7], [3, 3], [4, 0], [5, 6], [6, 1], [7, 5]], [[0, 2], [1, 5], [2, 1], [3, 4], [4, 7], [5, 0], [6, 6], [7, 3]], [[0, 2], [1, 5], [2, 1], [3, 6], [4, 0], [5, 3], [6, 7], [7, 4]], [[0, 2], [1, 5], [2, 1], [3, 6], [4, 4], [5, 0], [6, 7], [7, 3]], [[0, 2], [1, 5], [2, 3], [3, 0], [4, 7], [5, 4], [6, 6], [7, 1]], [[0, 2], [1, 5], [2, 3], [3, 1], [4, 7], [5, 4], [6, 6], [7, 0]], [[0, 2], [1, 5], [2, 7], [3, 0], [4, 3], [5, 6], [6, 4], [7, 1]], [[0, 2], [1, 5], [2, 7], [3, 0], [4, 4], [5, 6], [6, 1], [7, 3]], [[0, 2], [1, 5], [2, 7], [3, 1], [4, 3], [5, 0], [6, 6], [7, 4]], [[0, 2], [1, 6], [2, 1], [3, 7], [4, 4], [5, 0], [6, 3], [7, 5]], [[0, 2], [1, 6], [2, 1], [3, 7], [4, 5], [5, 3], [6, 0], [7, 4]], [[0, 2], [1, 7], [2, 3], [3, 6], [4, 0], [5, 5], [6, 1], [7, 4]], [[0, 3], [1, 0], [2, 4], [3, 7], [4, 1], [5, 6], [6, 2], [7, 5]], [[0, 3], [1, 0], [2, 4], [3, 7], [4, 5], [5, 2], [6, 6], [7, 1]], [[0, 3], [1, 1], [2, 4], [3, 7], [4, 5], [5, 0], [6, 2], [7, 6]], [[0, 3], [1, 1], [2, 6], [3, 2], [4, 5], [5, 7], [6, 0], [7, 4]], [[0, 3], [1, 1], [2, 6], [3, 2], [4, 5], [5, 7], [6, 4], [7, 0]], [[0, 3], [1, 1], [2, 6], [3, 4], [4, 0], [5, 7], [6, 5], [7, 2]], [[0, 3], [1, 1], [2, 7], [3, 4], [4, 6], [5, 0], [6, 2], [7, 5]], [[0, 3], [1, 1], [2, 7], [3, 5], [4, 0], [5, 2], [6, 4], [7, 6]], [[0, 3], [1, 5], [2, 0], [3, 4], [4, 1], [5, 7], [6, 2], [7, 6]], [[0, 3], [1, 5], [2, 7], [3, 1], [4, 6], [5, 0], [6, 2], [7, 4]], [[0, 3], [1, 5], [2, 7], [3, 2], [4, 0], [5, 6], [6, 4], [7, 1]], [[0, 3], [1, 6], [2, 0], [3, 7], [4, 4], [5, 1], [6, 5], [7, 2]], [[0, 3], [1, 6], [2, 2], [3, 7], [4, 1], [5, 4], [6, 0], [7, 5]], [[0, 3], [1, 6], [2, 4], [3, 1], [4, 5], [5, 0], [6, 2], [7, 7]], [[0, 3], [1, 6], [2, 4], [3, 2], [4, 0], [5, 5], [6, 7], [7, 1]], [[0, 3], [1, 7], [2, 0], [3, 2], [4, 5], [5, 1], [6, 6], [7, 4]], [[0, 3], [1, 7], [2, 0], [3, 4], [4, 6], [5, 1], [6, 5], [7, 2]], [[0, 3], [1, 7], [2, 4], [3, 2], [4, 0], [5, 6], [6, 1], [7, 5]], [[0, 4], [1, 0], [2, 3], [3, 5], [4, 7], [5, 1], [6, 6], [7, 2]], [[0, 4], [1, 0], [2, 7], [3, 3], [4, 1], [5, 6], [6, 2], [7, 5]], [[0, 4], [1, 0], [2, 7], [3, 5], [4, 2], [5, 6], [6, 1], [7, 3]], [[0, 4], [1, 1], [2, 3], [3, 5], [4, 7], [5, 2], [6, 0], [7, 6]], [[0, 4], [1, 1], [2, 3], [3, 6], [4, 2], [5, 7], [6, 5], [7, 0]], [[0, 4], [1, 1], [2, 5], [3, 0], [4, 6], [5, 3], [6, 7], [7, 2]], [[0, 4], [1, 1], [2, 7], [3, 0], [4, 3], [5, 6], [6, 2], [7, 5]], [[0, 4], [1, 2], [2, 0], [3, 5], [4, 7], [5, 1], [6, 3], [7, 6]], [[0, 4], [1, 2], [2, 0], [3, 6], [4, 1], [5, 7], [6, 5], [7, 3]], [[0, 4], [1, 2], [2, 7], [3, 3], [4, 6], [5, 0], [6, 5], [7, 1]], [[0, 4], [1, 6], [2, 0], [3, 2], [4, 7], [5, 5], [6, 3], [7, 1]], [[0, 4], [1, 6], [2, 0], [3, 3], [4, 1], [5, 7], [6, 5], [7, 2]], [[0, 4], [1, 6], [2, 1], [3, 3], [4, 7], [5, 0], [6, 2], [7, 5]], [[0, 4], [1, 6], [2, 1], [3, 5], [4, 2], [5, 0], [6, 3], [7, 7]], [[0, 4], [1, 6], [2, 1], [3, 5], [4, 2], [5, 0], [6, 7], [7, 3]], [[0, 4], [1, 6], [2, 3], [3, 0], [4, 2], [5, 7], [6, 5], [7, 1]], [[0, 4], [1, 7], [2, 3], [3, 0], [4, 2], [5, 5], [6, 1], [7, 6]], [[0, 4], [1, 7], [2, 3], [3, 0], [4, 6], [5, 1], [6, 5], [7, 2]], [[0, 5], [1, 0], [2, 4], [3, 1], [4, 7], [5, 2], [6, 6], [7, 3]], [[0, 5], [1, 1], [2, 6], [3, 0], [4, 2], [5, 4], [6, 7], [7, 3]], [[0, 5], [1, 1], [2, 6], [3, 0], [4, 3], [5, 7], [6, 4], [7, 2]], [[0, 5], [1, 2], [2, 0], [3, 6], [4, 4], [5, 7], [6, 1], [7, 3]], [[0, 5], [1, 2], [2, 0], [3, 7], [4, 3], [5, 1], [6, 6], [7, 4]], [[0, 5], [1, 2], [2, 0], [3, 7], [4, 4], [5, 1], [6, 3], [7, 6]], [[0, 5], [1, 2], [2, 4], [3, 6], [4, 0], [5, 3], [6, 1], [7, 7]], [[0, 5], [1, 2], [2, 4], [3, 7], [4, 0], [5, 3], [6, 1], [7, 6]], [[0, 5], [1, 2], [2, 6], [3, 1], [4, 3], [5, 7], [6, 0], [7, 4]], [[0, 5], [1, 2], [2, 6], [3, 1], [4, 7], [5, 4], [6, 0], [7, 3]], [[0, 5], [1, 2], [2, 6], [3, 3], [4, 0], [5, 7], [6, 1], [7, 4]], [[0, 5], [1, 3], [2, 0], [3, 4], [4, 7], [5, 1], [6, 6], [7, 2]], [[0, 5], [1, 3], [2, 1], [3, 7], [4, 4], [5, 6], [6, 0], [7, 2]], [[0, 5], [1, 3], [2, 6], [3, 0], [4, 2], [5, 4], [6, 1], [7, 7]], [[0, 5], [1, 3], [2, 6], [3, 0], [4, 7], [5, 1], [6, 4], [7, 2]], [[0, 5], [1, 7], [2, 1], [3, 3], [4, 0], [5, 6], [6, 4], [7, 2]], [[0, 6], [1, 0], [2, 2], [3, 7], [4, 5], [5, 3], [6, 1], [7, 4]], [[0, 6], [1, 1], [2, 3], [3, 0], [4, 7], [5, 4], [6, 2], [7, 5]], [[0, 6], [1, 1], [2, 5], [3, 2], [4, 0], [5, 3], [6, 7], [7, 4]], [[0, 6], [1, 2], [2, 0], [3, 5], [4, 7], [5, 4], [6, 1], [7, 3]], [[0, 6], [1, 2], [2, 7], [3, 1], [4, 4], [5, 0], [6, 5], [7, 3]], [[0, 6], [1, 3], [2, 1], [3, 4], [4, 7], [5, 0], [6, 2], [7, 5]], [[0, 6], [1, 3], [2, 1], [3, 7], [4, 5], [5, 0], [6, 2], [7, 4]], [[0, 6], [1, 4], [2, 2], [3, 0], [4, 5], [5, 7], [6, 1], [7, 3]], [[0, 7], [1, 1], [2, 3], [3, 0], [4, 6], [5, 4], [6, 2], [7, 5]], [[0, 7], [1, 1], [2, 4], [3, 2], [4, 0], [5, 6], [6, 3], [7, 5]], [[0, 7], [1, 2], [2, 0], [3, 5], [4, 1], [5, 4], [6, 6], [7, 3]], [[0, 7], [1, 3], [2, 0], [3, 2], [4, 5], [5, 1], [6, 6], [7, 4]]]
#print(len(final_queens))

forbidden = []
for i in range(8):
    text_line = input()
    for j in range(8):
        if text_line[j]==".":
            continue
        elif text_line[j]=="*":
            forbidden.append([j,i])


to_delete = []
for queen in final_queens:
    for p in forbidden:
        if queen.count(p)!=0:

            to_delete.append(queen)
            break
for el in to_delete:
    final_queens.remove(el)

print(len(final_queens))